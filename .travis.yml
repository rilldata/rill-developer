language: node_js
node_js:
  - 16

cache:
  directories:
    - "$HOME/.npm"
    - "$HOME/.cache"
    - "$TRAVIS_BUILD_DIR/data"
    - "node_modules"

env:
  global:
    - DOCKER_IMAGE=rilldata/rill-developer

jobs:
  include:

    # Run tests always
    - stage: Test
      name: "Verify build"

      before_install: &python-setup
        - echo "Installing python 3.7.0 needed during npm install"
        - pyenv install 3.7.0
        - pyenv global 3.7.0

      # in order to achieve npm ci (clean install) delete the travis cache.
      install: &npm-install
        - echo "NPM Install can take up to 15 mins"
        - npm i

      script:
        - echo "Running npm install"
        - npm install

        - echo "Check that prettier has been applied"
        - npx prettier --check "**/*"

        - echo "Install browser for UI tests"
        - npx playwright install

        - echo "Build the entire application"
        - npm run build

        - echo "Verify lint of the repo"
        - npm run lint

        - echo "Run all tests"
        - npm run test

    - stage: Test
      name: "Verify docker build"

      install: docker --version
      script:
        - echo "Building docker image"
        - docker build -t ${DOCKER_IMAGE} .

    # Publish docker image on the merge to main branch
    - stage: Publish
      name: "Build & Publish docker"
      if: tag IS NOT present AND branch = main AND type NOT IN (pull_request)

      install: docker --version

      script:
        - SHORT_SHA=$(git rev-parse --short HEAD)
        - echo ${DOCKERHUB_CRED} | docker login --username ${DOCKERHUB_USER} --password-stdin
        - docker-compose pull

        - echo "Publish docker image with tag ${SHORT_SHA}"
        - TAG=${SHORT_SHA} docker-compose build
        - TAG=${SHORT_SHA} docker-compose push

        - echo "Publish docker image with tag latest"
        - docker-compose build
        - docker-compose push

    # Publish binaries and npm on the release
    - stage: Release
      name: "Build & Publish npm module"
      if: tag IS present

      install: *npm-install

      deploy:
        provider: npm
        email: ops@rilldata.com
        api_key: ${NPMJS_TOKEN}
        skip_cleanup: true
        on:
          tags: true

    - stage: Release
      name: "Build & Publish Mac os binary"
      if: tag IS present
      os: osx
      env:
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=true

      install: *npm-install

      script: &build-vercel-pkg
        - echo "Build the entire application"
        - npm run build && npm run build:tsc

        - echo "Cleaning dev dependencies"
        - npm prune --production

        - echo "Building vercel/pkg binary"
        - node build-tools/replace_package_type.cjs module commonjs && npm run build-vercel-pkg

      deploy: &deploy-vercel-pkg
        provider: releases
        api_key: ${GITHUB_TOKEN}
        # explicitly mention all types of binaries
        # travis doesnt support folder upload as of now
        file:
          - rilldata/rill-macos-x64
          - rilldata/rill-linux-x64
          - rilldata/rill-win-x64.exe
        skip_cleanup: true
        on:
          tags: true

    - stage: Release
      name: "Build & Publish Linux binary"
      if: tag IS present
      env:
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=true

      before_install: *python-setup
      install: *npm-install
      script: *build-vercel-pkg
      deploy: *deploy-vercel-pkg

    - stage: Release
      name: "Build & Publish Windows binary"
      if: tag IS present
      os: windows
      env:
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=true

      before_install:
        - echo "Installing python 3"
        - choco install python3

      install: *npm-install
      script: *build-vercel-pkg
      deploy: *deploy-vercel-pkg
